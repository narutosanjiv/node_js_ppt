:css
  pre {
    white-space: pre-wrap; /* css-3 */
    white-space: -moz-pre-wrap !important; /* Mozilla, since 1999 */
    white-space: -pre-wrap; /* Opera 4-6 */
    white-space: -o-pre-wrap; /* Opera 7 */
    word-wrap: break-word; /* Internet Explorer 5.5+ */
    margin-left: -140px;
    height: 106px;    
  }
  pre.minht{
    height: 50px;
    overflow: hidden;
  }

  pre code{
    font-family: 'Monaco', 'Menlo', monospace;
    font-size: 13px;
    background-color: #1C1D1E;
    display: block;
    padding: 20px;
    overflow: auto;
    margin: 20px 0px;
    clear: both;
  }
  img{
    width: 920px;

  }
%div#node_js_presentation
  .slide
    %h1#prelogo
      Introduction to
    %h1#logo
      Node Js
    .footer
      Sanjiv Kumar Jha
      = link_to "@narutosanjiv", "http://twitter.com/narutosanjiv"
  .slide
    %h1
      How Node JS evolve
    %ul
      %li
        Ryan Dahl in JSConf 2009 introduced a project
      %li
        Project was platform for combining V8 engine and event loop.
      %li 
        Later project named as Node Js
      %li
        Currently Used by Large companies like LinkedIn, Microsoft, Walmart , yahoo        
  .slide
    %h1
      What is node ? and why needed? 
    %ul
      %li
        Node.js is compilation of Google's V8 JavaScript engine, the libUV platform abstraction layer, and a core library
      %li
        Written in Javascript and c(c++).
      %li
        Goal was to create the design functionality of push notification just like Gmail.
      %li
        To provide Web application ability to perform non-blocking , event-driven I/O operation.
      %li
        libuv is a new platform layer for Node
      %li
        Its purpose is to abstract IOCP on Windows and epoll/kqueue/event ports/etc.
  .slide
    = image_tag "javascript_for_node.jpeg"
  .slide
    %h1
      Why v8 javascript engine ?
    %ul
      %li
        V8 JavaScript VM is used in Google Chrome. V8(Lars Bak) is open-source
      %li
        No JIT, all JavaScript is compiled to assembler
      %li
        Hidden classes optimization from self(V8 does not dynamically look up access properties unlike other js engine).
      %li
        Improved garbage collector 
      %li
        V8 is many times faster than JScript (in Internet Explorer), SpiderMonkey (in Firefox), and JavaScriptCore (in Safari)
      
  .slide
    %h1
      Node.js vs Traditional Server
    %ul
      %li
        Highly scalable system that uses asynchronous event-driven I/O (input/output in nginx, node js), rather than threads or separate processes(apache)
      %li
        Each time a web resource is requested, Apache creates a separate thread or invokes a new process in order to process the request.
      %li
        Even though Apache responds quickly to requests, and cleans up after the request has been satisfied, this approach can still tie up
        a lot of resources. A popular web application is going to have serious performance issues.
      %li
        Node doesn't block any other request while waiting for the event functionality to complete, and events are processed first served, in a
        relatively uncomplicated event loop.
  .slide
    %h1 
      Blocking Vs Non-Blocking
    %ul
      %li
        Blocking Code
        %pre
          %span
            Read file from Filesystem, set equal to “contents”
            Print contents
            Do something else
      %li
        Non-Blocking Code
        %br/
        %span
          Read file from Filesystem
          whenever you’re complete, print the contents(this concept is actually callback).
          Do Something else
  .slide
    = image_tag "blocking_vs_non_blocking.jpeg"

  .slide
    %h1 
      Event Loop I/O in Node Js
    %ul
      %li
        Node Js uses an event loop.
      %li
        Code like this
        %br/
        %pre.minht
          %span.atv
            var result = db.query("select * from users");
          %br/
        Allows to blocks the entire process or
        implies multiple execution stacks.
      
      %li
        Code like this
        %br/
        %pre.minht
          %span.atv
            db.query("select * from users", function (result) {});
          %br/
        allows the program to return to the event loop immediately.
      %li
        This is how I/O should be done.

  .slide
    = image_tag "event_loop.jpeg"
  .slide
    %h1
      Setting up a Node Development Environment
    %ul
      %li
        Package installers are provided for both Windows and Mac OS
      %li
        For Windows, Go to http://nodejs.org/download/ and download window binary.
      %li
        For Linux, you can either download linux binary but it is recommend to install from source.

      %li
        Before Installing, install dependency of Node Js.
        %pre{style: 'height:106px;'}
          %span.atv{style: 'overflow-x:'}
            sudo apt-get install build-essential openssl 
            libssl-dev pkg-config
      %span
        Continue .....
  .slide
    %h1
      Node Js Installation continue 
    %ul
      %li
        Download the Node tarball from official site of node js.
        %pre
          %span.atv
            wget http://nodejs.org/dist/v0.8.16/node-v0.8.16.tar.gz
      %li
        Once downloaded, unzip and untar the file:
        %pre
          %span.atv
            tar -zxf node-v0.6.18.tar.gz
      %li
        Change into the directory and issue the following
        commands to compile and install Node:
        %pre
          %span.atv
            \./configure
            make
            sudo make install
      %li
        Above three command require 
        %em
          make
        utility in unix or linux based system to run makefile based on system installation.

  .slide
    %h1
      Node Js Installation continue 
    %ul
      %li
        Note in last command root privileges required, but node can be installed locally as explained below.
      %li
        Setting the prefix configuration option to a given path in your home directory installs Node locally.
        .pre
          %span.atv
            \./configure --prefix=$(HOME_DIR_WHATEVER_NAME)
            make & make install
          %span.atv
            echo 'export PATH=~/$(HOME_DIR_WHATEVER_NAME)/bin:${PATH}' >> ~/\.bashrc
      
      %li
        There are two different Windows infrastructures for Node Js on Window System. 
      %li
        One is the new Windows Azure cloud platforms that allows developers to host applications in a remote service, called a
        cloud. 
  .slide
    %h1
      Javascript and Node js
    %ul
      %li
        Earlier Javascript is used as scripting and then its is being used for browser and front-end stuff.
      %li
        Javascript in browser defines what you can do with languages but does not define what languages can do.
      %li
        Node.js allow prommer to write code in backend.
      %li
        Node.js is really two things: a runtime environment and a library.

  
  .slide 
    %h1
      Node Js in Action
    %ul
      %li
        Originally Node Js organize as module in different file.
      %li
        Node's module system discourages the use of globals
      %li
        But exception to above line is 
        %em
          process 
        and
        %em
          console 
      %li
        Console object contains several methods which are used to output information to stdout or stderr
      %li
        Frequently used console method is console.log(), which simply writes to stdout and appends a line feed (\n).
      %li
        %pre
          %span.atv
            console.log('wahoo');
            console.log({ foo: 'bar' });
      %li
        We will now run sample app.
  .slide
    %h1
      Global Object
    %ul
      %li
        %pre
          %span.atv
            console.assert(connected, 'Database connection failed');
        Asserts that the given expression is truthy, or throws an exception.
      %li
        Next Global Object: Process
      %li
        process.version
      %li
        process.execPath
      %li
        process.cwd()
      %li
        process.chdir()
      %li
        process.env
  .slide
    %h1
      Global Object : Process
    %ul
      %li
        When executing a file with the node executable process.argv provides access to the argument vector,
        the first value being the node executable, second being the filename, and remaining values being the
        arguments passed
        %pre
          %span.atv
            process.argv
      %li
        The process.exit() method is synonymous with the C function exit(), in which an exit code > 0 is passed to indicate failure, or 0 is passed to indicate success.
        %pre
          %span.atv
            process.exit()
  .slide
    %h1
      Global Object : Process
    %ul
      %li
        process.on(): ->
        The process itself is an EventEmitter, allowing you to do things like listen for uncaught exceptions via
        the uncaughtException event(see example of event).
      %li
        process.kill(): ->
        process.kill() method sends the signal passed to the given pid, defaulting to SIGINT(see the example).
      %li
        errno: -> The process object is host of the error numbers
        For example, process.EPERM represents a permission based error, while process.ENOENT represents a missing file or directory.

  .slide
    %h1
      Understanding process.nextTick() 
    %ul
      %li
        Apart from I/O - at any time, only one task/event is processed by Node's event loop.
      %li
        This event loop to be a queue of callbacks that are processed by Node on every tick of the event loop
      %li
        For every I/O bound task, We can simply define a callback that will get added to the event queue
      %li
        The callback will fire when the I/O operation is done, and in the mean time, the application can continue to process other I/O bound requests
      %li
        Given this model, what process.nextTick() actually does is defer the execution of an action till the next pass around the event loop.
      %li
        Let's take a simple example. If we had a function foo() which we wanted to invoke in the next tick, this is how we do it:
  .slide
    %h1
      Understanding process.nextTick()
    %ul
      %li
        %pre
          %span.atv
            function foo() {
            console.log('foo');
            }
            process.nextTick(foo);
            console.log('bar');
      %li
        bar will be printed in your console before foo, as we have delayed the invokation of foo() till the next tick of the event loop.
      %li
        In fact, We can get the same result by using setTimeout() this way:
        %br/
        setTimeout(foo, 0);
        %br/
        console.log('bar');


  .slide
    %h1
      Understanding Modules
    %ul
      %li
        In Node, modules are referenced either by fi le path or by name.
      %li
        A module that is referenced by a
        name will eventually map into a file path unless the module is a core module
      %li
        Each module of any type exposes a public API that the programmer can use
      %li
        To use a module of any type, you have to use the require function
        like this:
        %br/
        var module = require('module_name');
      %li
        The require function returns
        an object that represents the JavaScript API exposed by the module

  .slide 
    %h1
      Understanding Modules
    %ul
      %li
        The CommonJS module system is the only way objects or functions can be shared among files in
        Node
      %li
        Having a require
        function call in your code does not change the state of the global namespaces
      %li
        If the module is found and doesn’t contain a syntax or initialization error,
        calling require()simply returns the module object
      %li
        Module can be loaded by different way : 
        %br/
        1) Loading Core Mudule
        2) Loading a File Module
        3) Loading a Folder Module
        4) Loading from the node_modules Folder

  .slide
    %h1
      Understanding Module
    %ul
      %li
        Node has several modules compiled into its binary distribution called core modules.
      %li
        Core modules are referred to solely by the module name — not the path.
      %li
        Core modules are preferentially loaded even if a
        third-party module exists with the same name
      %li
        For instance, if we wanted to load 
        %em
          http core module
        we would be doing following:
        %br/
        var http = require('http');

      %li
        In case of Loading from Folder, node will presume this folder is a package and will
        try to look for a package definition(package.json).

  .slide
    %h1
      Understanding Module
    %ul
      %li
        If the module name is not relative and is not a core module, Node will try to find it inside the
        node_modules folder in the current directory
      %li
        For instance, if we do the following, Node will try to look for the file ./node_modules/myModule.js:
        %br/
        var myModule = require('myModule.js');
      %li
        We can also load a non-core module from the file system by providing the absolute path or relative path like this:
        %br/
        Absolute Path like this:
        var myModule = require('/home/pedro/my_modules/my_module');
        %br/
        Relative Path like this:
        var myModule = require('../my_modules/my_module');
        var myModule2 = require('./lib/my_module_2');
      %li
        Module First find with file without .js extension and if fails then it append .js extension and search is all above case.


  .slide
    = image_tag "local_vs_global.jpeg"
  .slide
    = image_tag "search_modules_remote.jpeg"
  .slide
    = image_tag "package_version.jpeg"
  .slide
    %h1
      Node Js Modules: Events
    %ul
      %li
        Node Events emitter is basic building block of Node js framework.
      %li
        Node's core module events supplies us with a single constructor, EventEmitter
      %li
        Typically an object inherits from EventEmitter.
      %li
        We can define any number of callbacks using the emitter.on() method,
        which accepts the name of the event and arbitrary objects passed as data
      %li
        When emitter.emit() is called,
        we are only required to pass the event name, followed by any number of arguments 
        (see example event emitter). 
  
  .slide
    %h1
      Node Js :remove Event Listeners
    %ul
      %li
        Event listeners are simply functions which are called when we emit() an event.
      %li
        We can remove these listeners by calling the removeListener(type, callback) method.
      %li
        We call removeListener() with the same
        arguments that we passed to on() originally.
      %li
        We could also have used removeAllListeners(type),
        which removes all listeners registered to the given type.
        (see live example). 
      
  .slide
    = image_tag "event_in_dom.jpeg"
  .slide
    = image_tag "node_event.jpeg"
  .slide
    = image_tag "custom_event.jpeg"
  .slide
    %h1
      Node Js : FileSystem
    %ul
      %li
        To work with the filesystem, node provides the "fs" module.
      %li
        The commands emulate the POSIX operations,
        and most methods work synchronously or asynchronously
      %li
        Basic Example:
        %pre{style: 'height: 200px;'}
          %span.atv
            var fs = require('fs');
            fs.mkdir('./helloDir',0777, function (err) {
            if (err) throw err;
            fs.writeFile('./helloDir/message.txt', 'Hello Node', 
            function (err) {
            if (err) throw err;
            console.log('file created with contents:');
            fs.readFile('./helloDir/message.txt','UTF-8' ,
            function (err, data) {
            if (err) throw err;
            console.log(data);
            });
            });
            })
      %li
        Each callback is placed in the previous callback — these are referred to as
        chainable callbacks
      %li
        The example can be rewritten to use a synchronous approach:
        %br/
        This can be acheived by appending 'Sync' to all filesytem function.
  .slide
    %h1
      NodeJs :Filesystem api
    %ul
      %li
        The fs.Stats object contains information about a particular file or directory.
      %li
        This can be used to determine
        what type of object we're working with
      %li
        The fs.watchfile method monitors a file and fires an event whenever the file is changed.
      %li 
        See live example
  - stream_pattern = File.join("#{Rails.root}/app/assets/images/", "*stream*.jpeg")
  -  Dir.glob(stream_pattern).sort.each do|image_name|
    .slide
      = image_tag File.basename(image_name).to_s
  .slide
    = image_tag "express_introduction.jpeg"
  .slide
    = image_tag "express_js_1.jpeg"
  .slide
    = image_tag "express_js_2.jpeg"
  .slide
    = image_tag "express_js_3.jpeg"
  .slide
    %p{style:'margin-top:200px;'}
      %h1{style: 'color:#D14;'}
        Socket.io

  .slide
    %p{style:'margin-top:200px;'}
      %h1{style: 'color:#D14;'}
        Reallity and Misconception about node js 
  .slide

:javascript
  $(document).ready(function(){
    $('#node_js_presentation').fathom();
  })
